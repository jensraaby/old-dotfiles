set nocompatible               " be iMproved
filetype off                   " required!
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" Jens's glorious selection of bundles:
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-endwise'

Plugin 'bling/vim-airline'
Plugin 'fatih/vim-go'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'git://git.wincent.com/command-t.git'
" Activate easymotion with ,,w for words
Plugin 'Lokaltog/vim-easymotion'
Plugin 'rizzatti/funcoo.vim'
Plugin 'rizzatti/dash.vim'
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
" cd ~/.vim/bundle/YouCompleteMe
" ./install.sh --clang-completer
Plugin 'honza/vim-snippets'
Plugin 'chase/vim-ansible-yaml'
Plugin 'jcf/vim-latex'
Plugin 'monnand/vim-markdown'
Plugin 'rodjek/vim-puppet'
Plugin 'majutsushi/tagbar'
Plugin 'godlygeek/tabular'
" need to run syntastic after the syntax plugins?
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'


" No more plugins!
call vundle#end()           " required
filetype plugin indent on   " required

"
" Standard configuration things:
"
syntax on
set encoding=utf-8
set showcmd
set ruler
set number
set autoread

"" Whitespace, tabs etc
set wrap
set textwidth=79
set laststatus=2
set expandtab
set backspace=indent,eol,start

" Leader - from Haegin's config
" Use , instead of \ as the leader key
let mapleader = ","
let g:mapleader = ","
" Which means we should use \ instead of , for backwards f search
noremap \ ,
" Magic: type JK to escape insert mode 
imap jk <ESC>l

"" Search 
set hlsearch " highlight search
set incsearch " incremental search
set ignorecase 
set smartcase " capitals in searches make them case sensitive
set showmatch " brackets

"" Other useful stuff:
set mouse=a " use mouse
set foldlevel=9999 " Expand folds
set history=500 " lines of history
set number 
set mat=2 " seconds of blinking when matching parentheses
set smartindent " special indentation
set autoindent
set smarttab
set laststatus=2 "always display statusline
let python_space_errors = 1
let python_highlight_space_errors = 1
set wildmode=longest,list

" Settings for YouCompleteMe
let g:ycm_confirm_extra_conf = 0
let g:ycm_min_num_of_chars_for_completion = 1
" Following lines help resolve Ultisnip/YCM compatibility
let g:ycm_key_list_select_completion = ['<C-n>','<Down>']
let g:ycm_key_list_previous_completion = ['C-p>','<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:EclimCompletionMethod = 'omnifunc'
" let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'

" Omnifunc - maybe? needed for completion
" set omnifunc=syntaxcomplete#Complete

" key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Go
"set rtp+=$GOROOT/misc/vim
au FileType go nmap <Leader>i <Plug>(go-info)
au Filetype go nnoremap <leader>r :GoRun %<CR>
au Filetype go nnoremap <leader>v :vsp <CR>:exe "GoDef" <CR>
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
"au Filetype go nnoremap <leader>t :tab split <CR>:exe "GoDef"<CR>
au Filetype go set tabstop=4 | set shiftwidth=4 | set sts=4 |set noexpandtab
let g:gofmt_command = "goimports"
let g:go_gmt_autofmt = 1
let g:go_snippet_engine = "UltiSnips"



" Odd solarized things
"
let g:solarized_termtrans = 1
colorscheme solarized
if has('gui_running')
  set background=light
else
  set background=dark
endif
call togglebg#map("<F5>")

" Setup airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'

" Syntastic
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_check_on_open=1

" Set fonts for MacVim
" My sight sucks, so I use a big font size.
" On my retina MBP, I often use higher scaling so this helps.
if has("gui_macvim")
  set guifont=Inconsolata\ for\ Powerline:h18
endif


" UltiSnips from fatih
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippetOrJump()
  if g:ulti_expand_or_jump_res == 0
    if pumvisible()
      return "\<C-N>"
    else
      return "\<TAB>"
    endif
  endif

  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

"================= end ultisnips

"""" Key mappings using the leader (,)
" Yank to OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*y
" Preserve indendation from system clipboard
noremap <leader>p :set paste<CR>:put *<CR>:set nopaste<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
noremap <leader>d :Dash<CR>
nnoremap <leader>ne :NERDTree<CR>

"""""""""""""" More key maps
" TagBar
nmap <leader>/ :TagbarToggle<CR>
" Gary Bernhardt's hash rocket shortcut
imap <c-l> <space>=><space>

nmap <up> <Nop>
nmap <down> <Nop>
nmap <left> <Nop>
nmap <right> <Nop>

"""""""""""""" Autocmds
" From Gary Bernhardt again
augroup vimrcEx
  autocmd!
  " this clears the group
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
  autocmd FileType python set sw=4 sts=4 et

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;
  " Don't syntax highlight markdown because it's often wrong
  autocmd! FileType mkd setlocal syn=off
  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=

augroup END

" Fast write and save
noremap <leader>w :w!<CR>
noremap <leader>q :q!<CR>
" ...
"
" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install(update) bundles
" :PluginSearch(!) foo - search(or refresh cache first) for foo
" :PluginClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin command are not allowed..

